import argparse



s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)


inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


###############################################################################################################


# create the argparse object
parser = argparse.ArgumentParser()


# add the arguments to the parser
parser.add_argument("-e", "--encrypt", nargs=3, metavar=("message_path", "key_path", "output_path"), help="Encrypt a message using a key and write it to output_path")
parser.add_argument("-d", "--decrypt", nargs=3, metavar=("cipher_path", "key_path", "output_path"), help="Decrypt a cipher using a key and write it to output_path")
parser.add_argument("-b", "--break_key", nargs=5, metavar=("message1_path", "cipher1_path", "message2_path", "cipher2_path", "key_path"), help="Break the key using 2 messages and 2 ciphers and write it to key_path")


# parse the arguments
args = parser.parse_args()


###############################################################################################################


def simple_aes(state_bytes, key):
    # State = SubBytes(State)
    sboxed_state_bytes = list()
    for sb in state_bytes:
        sboxed_state_bytes.append((s_box[sb[0]], s_box[sb[1]]))

    # AddRoundKey(State, K)
    added_round_key = list()
    for sb in sboxed_state_bytes:
        added_round_key.append((sb[0] ^ key[0], sb[1] ^ key[1]))

    # C = (R, L xor R xor K[0..7])
    cyphers = list()
    for ark in added_round_key:
        cyphers.append((ark[1], ark[0] ^ ark[1] ^ key[0]))

    return cyphers



def simple_decrypt_aes(state_bytes, key):
    # State = (L xor R xor K[0..7] xor R xor K[0..7], R)
    before_round_key = list()
    for sb in state_bytes:
        before_round_key.append((sb[1] ^ sb[0] ^ key[0], sb[0]))

    # State = AddRoundKey(State, K)
    added_round_key = list()
    for brk in before_round_key:
        added_round_key.append((brk[0] ^ key[0], brk[1] ^ key[1]))

    # State = InvSubBytes(State)
    deciphered = list()
    for ark in added_round_key:
        deciphered.append((inv_s_box[ark[0]], inv_s_box[ark[1]]))

    return deciphered



def get_bytes(path):
    # read bytes
    with open(path, 'rb', ) as f:
        path_bytes = f.read()
    
    # State = SubBytes(State)
    bytes_list = list()
    for i in range(0, len(path_bytes) - 1, 2):
        bytes_list.append((path_bytes[i], path_bytes[i + 1]))
    return bytes_list



def encrypt(message_pth, key_pth, output_pth):
    # read message bytes
    state_bytes = get_bytes(message_pth)
    
    # read keys bytes
    keys_bytes = get_bytes(key_pth)

    # encrypt first time
    cyphers1 = simple_aes(state_bytes, keys_bytes[0])

    # encrypt second time and flat list of tuples
    cyphers2 = list(sum(simple_aes(cyphers1, keys_bytes[1]), ()))

    # write cypher
    with open(output_pth, 'wb') as f:
        for c in cyphers2:
            f.write(c.to_bytes(1, byteorder='big'))



def decrypt(cipher_pth, key_pth, output_pth):
    # read message bytes
    cypher_bytes = get_bytes(cipher_pth)
    
    # read keys bytes
    keys_bytes = get_bytes(key_pth)

    # decrypt cypher first time
    cyphers1 = simple_decrypt_aes(cypher_bytes, keys_bytes[1])

    # decrypt cypher second time
    message = list(sum(simple_decrypt_aes(cyphers1, keys_bytes[0]), ()))

    # write key
    with open(output_pth, 'wb') as f:
        for m in message:
            f.write(m.to_bytes(1, byteorder='big'))



def break_key(message1_pth, cypher1_pth, message2_pth, cypher2_pth, key_pth):
    # get bytes of 2 messages
    message1_bytes = get_bytes(message1_pth)
    message2_bytes = get_bytes(message2_pth)

    # get bytes of 2 ciphers
    cypher1_bytes = get_bytes(cypher1_pth)
    cypher2_bytes = get_bytes(cypher2_pth)

    # get all possible cyphered messages and add it to dictionary
    # key - possible cypher after first iteration
    # value - key
    message_cypher_possibilities = dict()  # POSSIBILITIES
    for i in range(256):
        key = sum(simple_aes(message1_bytes, (0, i)), ())
        if key in message_cypher_possibilities:
            message_cypher_possibilities[key] = i
        else:
            message_cypher_possibilities[key] = i

    # get all possible deciphered cyphers
    cypher_message_possibilities = list()
    for i in range(256):
        cypher_message_possibilities.append(sum(simple_decrypt_aes(cypher1_bytes, (0, i)), ()))

    # iterate through all deciphered cyphers and check if dictionary contains it
    possible_keys = list()
    for i in range(256):
        # if it contains it, then we found possible key
        if cypher_message_possibilities[i] in message_cypher_possibilities:
            possible_keys.append((message_cypher_possibilities[cypher_message_possibilities[i]], i))

    # check possible keys and find the key
    # use message2, encrypt it and then compare it to cypher2
    for pk in possible_keys:
        # first encryption
        cyphers1 = simple_aes(message2_bytes, (0, pk[0]))
        message2_encrypted = simple_aes(cyphers1, (0, pk[1]))
        
        # if found key write it to the file
        if list(sum(message2_encrypted, ())) == list(sum(cypher2_bytes, ())):
            with open(key_pth, 'wb') as f:
                f.write(int(48).to_bytes(1, byteorder='big'))
                f.write(pk[0].to_bytes(1, byteorder='big'))
                f.write(int(48).to_bytes(1, byteorder='big'))
                f.write(pk[1].to_bytes(1, byteorder='big'))
                return


###############################################################################################################


if args.encrypt:
    message_path, key_path, output_path = args.encrypt
    encrypt(message_path, key_path, output_path)
elif args.decrypt:
    cipher_path, key_path, output_path = args.decrypt
    decrypt(cipher_path, key_path, output_path)
elif args.break_key:
    message1_path, cypher1_path, message2_path, cypher2_path, key_path = args.break_key
    break_key(message1_path, cypher1_path, message2_path, cypher2_path, key_path)
